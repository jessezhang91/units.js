/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
units._parser = (function () {
	var parser = {
		trace: function trace() {},
		yy: {},
		symbols_: {
			"error": 2,
			"expression": 3,
			"ng": 4,
			"in": 5,
			"u": 6,
			"EOF": 7,
			"+": 8,
			"-": 9,
			"*": 10,
			"/": 11,
			"^": 12,
			"n": 13,
			"(": 14,
			")": 15,
			"[": 16,
			"]": 17,
			"{": 18,
			"}": 19,
			"NUMBER": 20,
			"SEP": 21,
			"UNIT": 22,
			"$accept": 0,
			"$end": 1
		},
		terminals_: {
			2: "error",
			5: "in",
			7: "EOF",
			8: "+",
			9: "-",
			10: "*",
			11: "/",
			12: "^",
			13: "n",
			14: "(",
			15: ")",
			16: "[",
			17: "]",
			18: "{",
			19: "}",
			20: "NUMBER",
			21: "SEP",
			22: "UNIT"
		},
		productions_: [0, [3, 4], [3, 2], [3, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 1], [6, 3], [6, 3], [6, 3], [6, 3], [6, 4], [6, 3], [6, 1]],
		performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */ , $$ /* vstack */ , _$ /* lstack */ ) {
			/* this == yyval */

			var $0 = $$.length - 1;
			switch (yystate) {
			case 1:
				$$[$0 - 3].unit = u;
				return $$[$0 - 3];

				break;
			case 2:
				return $$[$0 - 1];

				break;
			case 3:
				return $$[$0 - 1];

				break;
			case 4:
				this.$ = units._add($$[$0 - 2], $$[$0]);

				break;
			case 5:
				this.$ = units._subtract($$[$0 - 2], $$[$0]);

				break;
			case 6:
				this.$ = units._times($$[$0 - 2], $$[$0]);

				break;
			case 7:
				this.$ = units._divide($$[$0 - 2], $$[$0]);

				break;
			case 8:
				this.$ = units._power($$[$0 - 2], $$[$0]);

				break;
			case 9:
				this.$ = {
					value: -$$[$0].value,
					unit: $$[$0].unit
				};

				break;
			case 10:
				this.$ = $$[$0 - 1];

				break;
			case 11:
				this.$ = $$[$0 - 1];

				break;
			case 12:
				this.$ = $$[$0 - 1];

				break;
			case 13:
				this.$ = units._convert({
					value: Number($$[$0 - 2]),
					unit: $$[$0]
				});

				break;
			case 14:
				this.$ = {
					value: Number($$[$0]),
					unit: []
				};

				break;
			case 15:
				this.$ = units._udivide($$[$0 - 2], $$[$0]);

				break;
			case 16:
				this.$ = units._utimes($$[$0 - 2], $$[$0]);

				break;
			case 17:
				this.$ = units._utimes($$[$0 - 2], $$[$0]);

				break;
			case 18:
				this.$ = units._upower($$[$0 - 2], Number($$[$0]));

				break;
			case 19:
				this.$ = units._upower($$[$0 - 3], -Number($$[$0]));

				break;
			case 20:
				this.$ = $$[$0 - 1];

				break;
			case 21:
				this.$ = units._parseUnit($$[$0]);

				break;
			}
		},
		table: [{
			3: 1,
			4: 2,
			6: 3,
			9: [1, 4],
			14: [1, 5],
			16: [1, 6],
			18: [1, 7],
			20: [1, 8],
			22: [1, 9]
		}, {
			1: [3]
		}, {
			5: [1, 10],
			7: [1, 11],
			8: [1, 12],
			9: [1, 13],
			10: [1, 14],
			11: [1, 15],
			12: [1, 16]
		}, {
			7: [1, 17],
			9: [1, 19],
			10: [1, 20],
			11: [1, 18],
			12: [1, 21]
		}, {
			4: 22,
			9: [1, 4],
			14: [1, 23],
			16: [1, 6],
			18: [1, 7],
			20: [1, 8]
		}, {
			4: 24,
			6: 25,
			9: [1, 26],
			14: [1, 27],
			16: [1, 28],
			18: [1, 29],
			20: [1, 30],
			22: [1, 31]
		}, {
			4: 32,
			9: [1, 33],
			14: [1, 34],
			16: [1, 35],
			18: [1, 36],
			20: [1, 37]
		}, {
			4: 38,
			9: [1, 39],
			14: [1, 40],
			16: [1, 41],
			18: [1, 42],
			20: [1, 43]
		}, {
			5: [2, 14],
			7: [2, 14],
			8: [2, 14],
			9: [2, 14],
			10: [2, 14],
			11: [2, 14],
			12: [2, 14],
			21: [1, 44]
		}, {
			7: [2, 21],
			9: [2, 21],
			10: [2, 21],
			11: [2, 21],
			12: [2, 21]
		}, {
			6: 45,
			14: [1, 46],
			22: [1, 9]
		}, {
			1: [2, 2]
		}, {
			4: 47,
			9: [1, 4],
			14: [1, 23],
			16: [1, 6],
			18: [1, 7],
			20: [1, 8]
		}, {
			4: 48,
			9: [1, 4],
			14: [1, 23],
			16: [1, 6],
			18: [1, 7],
			20: [1, 8]
		}, {
			4: 49,
			9: [1, 4],
			14: [1, 23],
			16: [1, 6],
			18: [1, 7],
			20: [1, 8]
		}, {
			4: 50,
			9: [1, 4],
			14: [1, 23],
			16: [1, 6],
			18: [1, 7],
			20: [1, 8]
		}, {
			13: [1, 51]
		}, {
			1: [2, 3]
		}, {
			6: 52,
			14: [1, 46],
			22: [1, 9]
		}, {
			6: 53,
			14: [1, 46],
			22: [1, 9]
		}, {
			6: 54,
			14: [1, 46],
			22: [1, 9]
		}, {
			9: [1, 56],
			20: [1, 55]
		}, {
			5: [2, 9],
			7: [2, 9],
			8: [2, 9],
			9: [2, 9],
			10: [2, 9],
			11: [2, 9],
			12: [1, 16]
		}, {
			4: 24,
			9: [1, 26],
			14: [1, 57],
			16: [1, 28],
			18: [1, 29],
			20: [1, 30]
		}, {
			8: [1, 59],
			9: [1, 60],
			10: [1, 61],
			11: [1, 62],
			12: [1, 63],
			15: [1, 58]
		}, {
			9: [1, 66],
			10: [1, 67],
			11: [1, 65],
			12: [1, 68],
			15: [1, 64]
		}, {
			4: 69,
			9: [1, 26],
			14: [1, 57],
			16: [1, 28],
			18: [1, 29],
			20: [1, 30]
		}, {
			4: 70,
			6: 71,
			9: [1, 26],
			14: [1, 27],
			16: [1, 28],
			18: [1, 29],
			20: [1, 30],
			22: [1, 31]
		}, {
			4: 72,
			9: [1, 33],
			14: [1, 34],
			16: [1, 35],
			18: [1, 36],
			20: [1, 37]
		}, {
			4: 73,
			9: [1, 39],
			14: [1, 40],
			16: [1, 41],
			18: [1, 42],
			20: [1, 43]
		}, {
			8: [2, 14],
			9: [2, 14],
			10: [2, 14],
			11: [2, 14],
			12: [2, 14],
			15: [2, 14],
			21: [1, 74]
		}, {
			9: [2, 21],
			10: [2, 21],
			11: [2, 21],
			12: [2, 21],
			15: [2, 21]
		}, {
			8: [1, 76],
			9: [1, 77],
			10: [1, 78],
			11: [1, 79],
			12: [1, 80],
			17: [1, 75]
		}, {
			4: 81,
			9: [1, 33],
			14: [1, 34],
			16: [1, 35],
			18: [1, 36],
			20: [1, 37]
		}, {
			4: 82,
			9: [1, 26],
			14: [1, 57],
			16: [1, 28],
			18: [1, 29],
			20: [1, 30]
		}, {
			4: 83,
			9: [1, 33],
			14: [1, 34],
			16: [1, 35],
			18: [1, 36],
			20: [1, 37]
		}, {
			4: 84,
			9: [1, 39],
			14: [1, 40],
			16: [1, 41],
			18: [1, 42],
			20: [1, 43]
		}, {
			8: [2, 14],
			9: [2, 14],
			10: [2, 14],
			11: [2, 14],
			12: [2, 14],
			17: [2, 14],
			21: [1, 85]
		}, {
			8: [1, 87],
			9: [1, 88],
			10: [1, 89],
			11: [1, 90],
			12: [1, 91],
			19: [1, 86]
		}, {
			4: 92,
			9: [1, 39],
			14: [1, 40],
			16: [1, 41],
			18: [1, 42],
			20: [1, 43]
		}, {
			4: 93,
			9: [1, 26],
			14: [1, 57],
			16: [1, 28],
			18: [1, 29],
			20: [1, 30]
		}, {
			4: 94,
			9: [1, 33],
			14: [1, 34],
			16: [1, 35],
			18: [1, 36],
			20: [1, 37]
		}, {
			4: 95,
			9: [1, 39],
			14: [1, 40],
			16: [1, 41],
			18: [1, 42],
			20: [1, 43]
		}, {
			8: [2, 14],
			9: [2, 14],
			10: [2, 14],
			11: [2, 14],
			12: [2, 14],
			19: [2, 14],
			21: [1, 96]
		}, {
			6: 97,
			14: [1, 98],
			22: [1, 99]
		}, {
			7: [1, 100],
			9: [1, 19],
			10: [1, 20],
			11: [1, 18],
			12: [1, 21]
		}, {
			6: 25,
			14: [1, 101],
			22: [1, 31]
		}, {
			5: [2, 4],
			7: [2, 4],
			8: [2, 4],
			9: [2, 4],
			10: [1, 14],
			11: [1, 15],
			12: [1, 16]
		}, {
			5: [2, 5],
			7: [2, 5],
			8: [2, 5],
			9: [2, 5],
			10: [1, 14],
			11: [1, 15],
			12: [1, 16]
		}, {
			5: [2, 6],
			7: [2, 6],
			8: [2, 6],
			9: [2, 6],
			10: [2, 6],
			11: [2, 6],
			12: [1, 16]
		}, {
			5: [2, 7],
			7: [2, 7],
			8: [2, 7],
			9: [2, 7],
			10: [2, 7],
			11: [2, 7],
			12: [1, 16]
		}, {
			5: [2, 8],
			7: [2, 8],
			8: [2, 8],
			9: [2, 8],
			10: [2, 8],
			11: [2, 8],
			12: [2, 8]
		}, {
			7: [2, 15],
			9: [1, 19],
			10: [1, 20],
			11: [1, 18],
			12: [1, 21]
		}, {
			7: [2, 16],
			9: [2, 16],
			10: [1, 20],
			11: [1, 18],
			12: [1, 21]
		}, {
			7: [2, 17],
			9: [2, 17],
			10: [2, 17],
			11: [2, 17],
			12: [1, 21]
		}, {
			7: [2, 18],
			9: [2, 18],
			10: [2, 18],
			11: [2, 18],
			12: [2, 18]
		}, {
			20: [1, 102]
		}, {
			4: 70,
			9: [1, 26],
			14: [1, 57],
			16: [1, 28],
			18: [1, 29],
			20: [1, 30]
		}, {
			5: [2, 10],
			7: [2, 10],
			8: [2, 10],
			9: [2, 10],
			10: [2, 10],
			11: [2, 10],
			12: [2, 10]
		}, {
			4: 103,
			9: [1, 26],
			14: [1, 57],
			16: [1, 28],
			18: [1, 29],
			20: [1, 30]
		}, {
			4: 104,
			9: [1, 26],
			14: [1, 57],
			16: [1, 28],
			18: [1, 29],
			20: [1, 30]
		}, {
			4: 105,
			9: [1, 26],
			14: [1, 57],
			16: [1, 28],
			18: [1, 29],
			20: [1, 30]
		}, {
			4: 106,
			9: [1, 26],
			14: [1, 57],
			16: [1, 28],
			18: [1, 29],
			20: [1, 30]
		}, {
			13: [1, 107]
		}, {
			7: [2, 20],
			9: [2, 20],
			10: [2, 20],
			11: [2, 20],
			12: [2, 20]
		}, {
			6: 108,
			14: [1, 101],
			22: [1, 31]
		}, {
			6: 109,
			14: [1, 101],
			22: [1, 31]
		}, {
			6: 110,
			14: [1, 101],
			22: [1, 31]
		}, {
			9: [1, 112],
			20: [1, 111]
		}, {
			8: [2, 9],
			9: [2, 9],
			10: [2, 9],
			11: [2, 9],
			12: [1, 63],
			15: [2, 9]
		}, {
			8: [1, 59],
			9: [1, 60],
			10: [1, 61],
			11: [1, 62],
			12: [1, 63],
			15: [1, 113]
		}, {
			9: [1, 66],
			10: [1, 67],
			11: [1, 65],
			12: [1, 68],
			15: [1, 114]
		}, {
			8: [1, 76],
			9: [1, 77],
			10: [1, 78],
			11: [1, 79],
			12: [1, 80],
			17: [1, 115]
		}, {
			8: [1, 87],
			9: [1, 88],
			10: [1, 89],
			11: [1, 90],
			12: [1, 91],
			19: [1, 116]
		}, {
			6: 117,
			14: [1, 118],
			22: [1, 119]
		}, {
			5: [2, 11],
			7: [2, 11],
			8: [2, 11],
			9: [2, 11],
			10: [2, 11],
			11: [2, 11],
			12: [2, 11]
		}, {
			4: 120,
			9: [1, 33],
			14: [1, 34],
			16: [1, 35],
			18: [1, 36],
			20: [1, 37]
		}, {
			4: 121,
			9: [1, 33],
			14: [1, 34],
			16: [1, 35],
			18: [1, 36],
			20: [1, 37]
		}, {
			4: 122,
			9: [1, 33],
			14: [1, 34],
			16: [1, 35],
			18: [1, 36],
			20: [1, 37]
		}, {
			4: 123,
			9: [1, 33],
			14: [1, 34],
			16: [1, 35],
			18: [1, 36],
			20: [1, 37]
		}, {
			13: [1, 124]
		}, {
			8: [2, 9],
			9: [2, 9],
			10: [2, 9],
			11: [2, 9],
			12: [1, 80],
			17: [2, 9]
		}, {
			8: [1, 59],
			9: [1, 60],
			10: [1, 61],
			11: [1, 62],
			12: [1, 63],
			15: [1, 125]
		}, {
			8: [1, 76],
			9: [1, 77],
			10: [1, 78],
			11: [1, 79],
			12: [1, 80],
			17: [1, 126]
		}, {
			8: [1, 87],
			9: [1, 88],
			10: [1, 89],
			11: [1, 90],
			12: [1, 91],
			19: [1, 127]
		}, {
			6: 128,
			14: [1, 129],
			22: [1, 130]
		}, {
			5: [2, 12],
			7: [2, 12],
			8: [2, 12],
			9: [2, 12],
			10: [2, 12],
			11: [2, 12],
			12: [2, 12]
		}, {
			4: 131,
			9: [1, 39],
			14: [1, 40],
			16: [1, 41],
			18: [1, 42],
			20: [1, 43]
		}, {
			4: 132,
			9: [1, 39],
			14: [1, 40],
			16: [1, 41],
			18: [1, 42],
			20: [1, 43]
		}, {
			4: 133,
			9: [1, 39],
			14: [1, 40],
			16: [1, 41],
			18: [1, 42],
			20: [1, 43]
		}, {
			4: 134,
			9: [1, 39],
			14: [1, 40],
			16: [1, 41],
			18: [1, 42],
			20: [1, 43]
		}, {
			13: [1, 135]
		}, {
			8: [2, 9],
			9: [2, 9],
			10: [2, 9],
			11: [2, 9],
			12: [1, 91],
			19: [2, 9]
		}, {
			8: [1, 59],
			9: [1, 60],
			10: [1, 61],
			11: [1, 62],
			12: [1, 63],
			15: [1, 136]
		}, {
			8: [1, 76],
			9: [1, 77],
			10: [1, 78],
			11: [1, 79],
			12: [1, 80],
			17: [1, 137]
		}, {
			8: [1, 87],
			9: [1, 88],
			10: [1, 89],
			11: [1, 90],
			12: [1, 91],
			19: [1, 138]
		}, {
			6: 139,
			14: [1, 140],
			22: [1, 141]
		}, {
			5: [2, 13],
			7: [2, 13],
			8: [2, 13],
			9: [1, 143],
			10: [1, 144],
			11: [1, 142],
			12: [1, 145]
		}, {
			6: 146,
			14: [1, 101],
			22: [1, 31]
		}, {
			5: [2, 21],
			7: [2, 21],
			8: [2, 21],
			9: [2, 21],
			10: [2, 21],
			11: [2, 21],
			12: [2, 21]
		}, {
			1: [2, 1]
		}, {
			6: 71,
			14: [1, 101],
			22: [1, 31]
		}, {
			7: [2, 19],
			9: [2, 19],
			10: [2, 19],
			11: [2, 19],
			12: [2, 19]
		}, {
			8: [2, 4],
			9: [2, 4],
			10: [1, 61],
			11: [1, 62],
			12: [1, 63],
			15: [2, 4]
		}, {
			8: [2, 5],
			9: [2, 5],
			10: [1, 61],
			11: [1, 62],
			12: [1, 63],
			15: [2, 5]
		}, {
			8: [2, 6],
			9: [2, 6],
			10: [2, 6],
			11: [2, 6],
			12: [1, 63],
			15: [2, 6]
		}, {
			8: [2, 7],
			9: [2, 7],
			10: [2, 7],
			11: [2, 7],
			12: [1, 63],
			15: [2, 7]
		}, {
			8: [2, 8],
			9: [2, 8],
			10: [2, 8],
			11: [2, 8],
			12: [2, 8],
			15: [2, 8]
		}, {
			9: [1, 66],
			10: [1, 67],
			11: [1, 65],
			12: [1, 68],
			15: [2, 15]
		}, {
			9: [2, 16],
			10: [1, 67],
			11: [1, 65],
			12: [1, 68],
			15: [2, 16]
		}, {
			9: [2, 17],
			10: [2, 17],
			11: [2, 17],
			12: [1, 68],
			15: [2, 17]
		}, {
			9: [2, 18],
			10: [2, 18],
			11: [2, 18],
			12: [2, 18],
			15: [2, 18]
		}, {
			20: [1, 147]
		}, {
			8: [2, 10],
			9: [2, 10],
			10: [2, 10],
			11: [2, 10],
			12: [2, 10],
			15: [2, 10]
		}, {
			9: [2, 20],
			10: [2, 20],
			11: [2, 20],
			12: [2, 20],
			15: [2, 20]
		}, {
			8: [2, 11],
			9: [2, 11],
			10: [2, 11],
			11: [2, 11],
			12: [2, 11],
			15: [2, 11]
		}, {
			8: [2, 12],
			9: [2, 12],
			10: [2, 12],
			11: [2, 12],
			12: [2, 12],
			15: [2, 12]
		}, {
			8: [2, 13],
			9: [1, 149],
			10: [1, 150],
			11: [1, 148],
			12: [1, 151],
			15: [2, 13]
		}, {
			6: 152,
			14: [1, 101],
			22: [1, 31]
		}, {
			8: [2, 21],
			9: [2, 21],
			10: [2, 21],
			11: [2, 21],
			12: [2, 21],
			15: [2, 21]
		}, {
			8: [2, 4],
			9: [2, 4],
			10: [1, 78],
			11: [1, 79],
			12: [1, 80],
			17: [2, 4]
		}, {
			8: [2, 5],
			9: [2, 5],
			10: [1, 78],
			11: [1, 79],
			12: [1, 80],
			17: [2, 5]
		}, {
			8: [2, 6],
			9: [2, 6],
			10: [2, 6],
			11: [2, 6],
			12: [1, 80],
			17: [2, 6]
		}, {
			8: [2, 7],
			9: [2, 7],
			10: [2, 7],
			11: [2, 7],
			12: [1, 80],
			17: [2, 7]
		}, {
			8: [2, 8],
			9: [2, 8],
			10: [2, 8],
			11: [2, 8],
			12: [2, 8],
			17: [2, 8]
		}, {
			8: [2, 10],
			9: [2, 10],
			10: [2, 10],
			11: [2, 10],
			12: [2, 10],
			17: [2, 10]
		}, {
			8: [2, 11],
			9: [2, 11],
			10: [2, 11],
			11: [2, 11],
			12: [2, 11],
			17: [2, 11]
		}, {
			8: [2, 12],
			9: [2, 12],
			10: [2, 12],
			11: [2, 12],
			12: [2, 12],
			17: [2, 12]
		}, {
			8: [2, 13],
			9: [1, 154],
			10: [1, 155],
			11: [1, 153],
			12: [1, 156],
			17: [2, 13]
		}, {
			6: 157,
			14: [1, 101],
			22: [1, 31]
		}, {
			8: [2, 21],
			9: [2, 21],
			10: [2, 21],
			11: [2, 21],
			12: [2, 21],
			17: [2, 21]
		}, {
			8: [2, 4],
			9: [2, 4],
			10: [1, 89],
			11: [1, 90],
			12: [1, 91],
			19: [2, 4]
		}, {
			8: [2, 5],
			9: [2, 5],
			10: [1, 89],
			11: [1, 90],
			12: [1, 91],
			19: [2, 5]
		}, {
			8: [2, 6],
			9: [2, 6],
			10: [2, 6],
			11: [2, 6],
			12: [1, 91],
			19: [2, 6]
		}, {
			8: [2, 7],
			9: [2, 7],
			10: [2, 7],
			11: [2, 7],
			12: [1, 91],
			19: [2, 7]
		}, {
			8: [2, 8],
			9: [2, 8],
			10: [2, 8],
			11: [2, 8],
			12: [2, 8],
			19: [2, 8]
		}, {
			8: [2, 10],
			9: [2, 10],
			10: [2, 10],
			11: [2, 10],
			12: [2, 10],
			19: [2, 10]
		}, {
			8: [2, 11],
			9: [2, 11],
			10: [2, 11],
			11: [2, 11],
			12: [2, 11],
			19: [2, 11]
		}, {
			8: [2, 12],
			9: [2, 12],
			10: [2, 12],
			11: [2, 12],
			12: [2, 12],
			19: [2, 12]
		}, {
			8: [2, 13],
			9: [1, 159],
			10: [1, 160],
			11: [1, 158],
			12: [1, 161],
			19: [2, 13]
		}, {
			6: 162,
			14: [1, 101],
			22: [1, 31]
		}, {
			8: [2, 21],
			9: [2, 21],
			10: [2, 21],
			11: [2, 21],
			12: [2, 21],
			19: [2, 21]
		}, {
			6: 163,
			14: [1, 98],
			22: [1, 99]
		}, {
			6: 164,
			14: [1, 98],
			22: [1, 99]
		}, {
			6: 165,
			14: [1, 98],
			22: [1, 99]
		}, {
			9: [1, 167],
			20: [1, 166]
		}, {
			9: [1, 66],
			10: [1, 67],
			11: [1, 65],
			12: [1, 68],
			15: [1, 168]
		}, {
			9: [2, 19],
			10: [2, 19],
			11: [2, 19],
			12: [2, 19],
			15: [2, 19]
		}, {
			6: 169,
			14: [1, 118],
			22: [1, 119]
		}, {
			6: 170,
			14: [1, 118],
			22: [1, 119]
		}, {
			6: 171,
			14: [1, 118],
			22: [1, 119]
		}, {
			9: [1, 173],
			20: [1, 172]
		}, {
			9: [1, 66],
			10: [1, 67],
			11: [1, 65],
			12: [1, 68],
			15: [1, 174]
		}, {
			6: 175,
			14: [1, 129],
			22: [1, 130]
		}, {
			6: 176,
			14: [1, 129],
			22: [1, 130]
		}, {
			6: 177,
			14: [1, 129],
			22: [1, 130]
		}, {
			9: [1, 179],
			20: [1, 178]
		}, {
			9: [1, 66],
			10: [1, 67],
			11: [1, 65],
			12: [1, 68],
			15: [1, 180]
		}, {
			6: 181,
			14: [1, 140],
			22: [1, 141]
		}, {
			6: 182,
			14: [1, 140],
			22: [1, 141]
		}, {
			6: 183,
			14: [1, 140],
			22: [1, 141]
		}, {
			9: [1, 185],
			20: [1, 184]
		}, {
			9: [1, 66],
			10: [1, 67],
			11: [1, 65],
			12: [1, 68],
			15: [1, 186]
		}, {
			5: [2, 15],
			7: [2, 15],
			8: [2, 15],
			9: [1, 143],
			10: [1, 144],
			11: [1, 142],
			12: [1, 145]
		}, {
			5: [2, 16],
			7: [2, 16],
			8: [2, 16],
			9: [2, 16],
			10: [1, 144],
			11: [1, 142],
			12: [1, 145]
		}, {
			5: [2, 17],
			7: [2, 17],
			8: [2, 17],
			9: [2, 17],
			10: [2, 17],
			11: [2, 17],
			12: [1, 145]
		}, {
			5: [2, 18],
			7: [2, 18],
			8: [2, 18],
			9: [2, 18],
			10: [2, 18],
			11: [2, 18],
			12: [2, 18]
		}, {
			20: [1, 187]
		}, {
			5: [2, 20],
			7: [2, 20],
			8: [2, 20],
			9: [2, 20],
			10: [2, 20],
			11: [2, 20],
			12: [2, 20]
		}, {
			8: [2, 15],
			9: [1, 149],
			10: [1, 150],
			11: [1, 148],
			12: [1, 151],
			15: [2, 15]
		}, {
			8: [2, 16],
			9: [2, 16],
			10: [1, 150],
			11: [1, 148],
			12: [1, 151],
			15: [2, 16]
		}, {
			8: [2, 17],
			9: [2, 17],
			10: [2, 17],
			11: [2, 17],
			12: [1, 151],
			15: [2, 17]
		}, {
			8: [2, 18],
			9: [2, 18],
			10: [2, 18],
			11: [2, 18],
			12: [2, 18],
			15: [2, 18]
		}, {
			20: [1, 188]
		}, {
			8: [2, 20],
			9: [2, 20],
			10: [2, 20],
			11: [2, 20],
			12: [2, 20],
			15: [2, 20]
		}, {
			8: [2, 15],
			9: [1, 154],
			10: [1, 155],
			11: [1, 153],
			12: [1, 156],
			17: [2, 15]
		}, {
			8: [2, 16],
			9: [2, 16],
			10: [1, 155],
			11: [1, 153],
			12: [1, 156],
			17: [2, 16]
		}, {
			8: [2, 17],
			9: [2, 17],
			10: [2, 17],
			11: [2, 17],
			12: [1, 156],
			17: [2, 17]
		}, {
			8: [2, 18],
			9: [2, 18],
			10: [2, 18],
			11: [2, 18],
			12: [2, 18],
			17: [2, 18]
		}, {
			20: [1, 189]
		}, {
			8: [2, 20],
			9: [2, 20],
			10: [2, 20],
			11: [2, 20],
			12: [2, 20],
			17: [2, 20]
		}, {
			8: [2, 15],
			9: [1, 159],
			10: [1, 160],
			11: [1, 158],
			12: [1, 161],
			19: [2, 15]
		}, {
			8: [2, 16],
			9: [2, 16],
			10: [1, 160],
			11: [1, 158],
			12: [1, 161],
			19: [2, 16]
		}, {
			8: [2, 17],
			9: [2, 17],
			10: [2, 17],
			11: [2, 17],
			12: [1, 161],
			19: [2, 17]
		}, {
			8: [2, 18],
			9: [2, 18],
			10: [2, 18],
			11: [2, 18],
			12: [2, 18],
			19: [2, 18]
		}, {
			20: [1, 190]
		}, {
			8: [2, 20],
			9: [2, 20],
			10: [2, 20],
			11: [2, 20],
			12: [2, 20],
			19: [2, 20]
		}, {
			5: [2, 19],
			7: [2, 19],
			8: [2, 19],
			9: [2, 19],
			10: [2, 19],
			11: [2, 19],
			12: [2, 19]
		}, {
			8: [2, 19],
			9: [2, 19],
			10: [2, 19],
			11: [2, 19],
			12: [2, 19],
			15: [2, 19]
		}, {
			8: [2, 19],
			9: [2, 19],
			10: [2, 19],
			11: [2, 19],
			12: [2, 19],
			17: [2, 19]
		}, {
			8: [2, 19],
			9: [2, 19],
			10: [2, 19],
			11: [2, 19],
			12: [2, 19],
			19: [2, 19]
		}],
		defaultActions: {
			11: [2, 2],
			17: [2, 3],
			100: [2, 1]
		},
		parseError: function parseError(str, hash) {
			if (hash.recoverable) {
				this.trace(str);
			} else {
				throw new Error(str);
			}
		},
		parse: function parse(input) {
			var self = this,
				stack = [0],
				vstack = [null],
				lstack = [],
				table = this.table,
				yytext = '',
				yylineno = 0,
				yyleng = 0,
				recovering = 0,
				TERROR = 2,
				EOF = 1;
			var args = lstack.slice.call(arguments, 1);
			this.lexer.setInput(input);
			this.lexer.yy = this.yy;
			this.yy.lexer = this.lexer;
			this.yy.parser = this;
			if (typeof this.lexer.yylloc == 'undefined') {
				this.lexer.yylloc = {};
			}
			var yyloc = this.lexer.yylloc;
			lstack.push(yyloc);
			var ranges = this.lexer.options && this.lexer.options.ranges;
			if (typeof this.yy.parseError === 'function') {
				this.parseError = this.yy.parseError;
			} else {
				this.parseError = Object.getPrototypeOf(this).parseError;
			}

			function popStack(n) {
				stack.length = stack.length - 2 * n;
				vstack.length = vstack.length - n;
				lstack.length = lstack.length - n;
			}

			function lex() {
				var token;
				token = self.lexer.lex() || EOF;
				if (typeof token !== 'number') {
					token = self.symbols_[token] || token;
				}
				return token;
			}
			var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
			while (true) {
				state = stack[stack.length - 1];
				if (this.defaultActions[state]) {
					action = this.defaultActions[state];
				} else {
					if (symbol === null || typeof symbol == 'undefined') {
						symbol = lex();
					}
					action = table[state] && table[state][symbol];
				}
				if (typeof action === 'undefined' || !action.length || !action[0]) {
					var errStr = '';
					expected = [];
					for (p in table[state]) {
						if (this.terminals_[p] && p > TERROR) {
							expected.push('\'' + this.terminals_[p] + '\'');
						}
					}
					if (this.lexer.showPosition) {
						errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
					} else {
						errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
					}
					this.parseError(errStr, {
						text: this.lexer.match,
						token: this.terminals_[symbol] || symbol,
						line: this.lexer.yylineno,
						loc: yyloc,
						expected: expected
					});
				}
				if (action[0] instanceof Array && action.length > 1) {
					throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
				}
				switch (action[0]) {
				case 1:
					stack.push(symbol);
					vstack.push(this.lexer.yytext);
					lstack.push(this.lexer.yylloc);
					stack.push(action[1]);
					symbol = null;
					if (!preErrorSymbol) {
						yyleng = this.lexer.yyleng;
						yytext = this.lexer.yytext;
						yylineno = this.lexer.yylineno;
						yyloc = this.lexer.yylloc;
						if (recovering > 0) {
							recovering--;
						}
					} else {
						symbol = preErrorSymbol;
						preErrorSymbol = null;
					}
					break;
				case 2:
					len = this.productions_[action[1]][1];
					yyval.$ = vstack[vstack.length - len];
					yyval._$ = {
						first_line: lstack[lstack.length - (len || 1)].first_line,
						last_line: lstack[lstack.length - 1].last_line,
						first_column: lstack[lstack.length - (len || 1)].first_column,
						last_column: lstack[lstack.length - 1].last_column
					};
					if (ranges) {
						yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
					}
					r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
					if (typeof r !== 'undefined') {
						return r;
					}
					if (len) {
						stack = stack.slice(0, -1 * len * 2);
						vstack = vstack.slice(0, -1 * len);
						lstack = lstack.slice(0, -1 * len);
					}
					stack.push(this.productions_[action[1]][0]);
					vstack.push(yyval.$);
					lstack.push(yyval._$);
					newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
					stack.push(newState);
					break;
				case 3:
					return true;
				}
			}
			return true;
		}
	};
	/* generated by jison-lex 0.2.1 */
	var lexer = (function () {
		var lexer = {

			EOF: 1,

			parseError: function parseError(str, hash) {
				if (this.yy.parser) {
					this.yy.parser.parseError(str, hash);
				} else {
					throw new Error(str);
				}
			},

			// resets the lexer, sets new input
			setInput: function (input) {
				this._input = input;
				this._more = this._backtrack = this.done = false;
				this.yylineno = this.yyleng = 0;
				this.yytext = this.matched = this.match = '';
				this.conditionStack = ['INITIAL'];
				this.yylloc = {
					first_line: 1,
					first_column: 0,
					last_line: 1,
					last_column: 0
				};
				if (this.options.ranges) {
					this.yylloc.range = [0, 0];
				}
				this.offset = 0;
				return this;
			},

			// consumes and returns one char from the input
			input: function () {
				var ch = this._input[0];
				this.yytext += ch;
				this.yyleng++;
				this.offset++;
				this.match += ch;
				this.matched += ch;
				var lines = ch.match(/(?:\r\n?|\n).*/g);
				if (lines) {
					this.yylineno++;
					this.yylloc.last_line++;
				} else {
					this.yylloc.last_column++;
				}
				if (this.options.ranges) {
					this.yylloc.range[1]++;
				}

				this._input = this._input.slice(1);
				return ch;
			},

			// unshifts one char (or a string) into the input
			unput: function (ch) {
				var len = ch.length;
				var lines = ch.split(/(?:\r\n?|\n)/g);

				this._input = ch + this._input;
				this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
				//this.yyleng -= len;
				this.offset -= len;
				var oldLines = this.match.split(/(?:\r\n?|\n)/g);
				this.match = this.match.substr(0, this.match.length - 1);
				this.matched = this.matched.substr(0, this.matched.length - 1);

				if (lines.length - 1) {
					this.yylineno -= lines.length - 1;
				}
				var r = this.yylloc.range;

				this.yylloc = {
					first_line: this.yylloc.first_line,
					last_line: this.yylineno + 1,
					first_column: this.yylloc.first_column,
					last_column: lines ?
						(lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
				};

				if (this.options.ranges) {
					this.yylloc.range = [r[0], r[0] + this.yyleng - len];
				}
				this.yyleng = this.yytext.length;
				return this;
			},

			// When called from action, caches matched text and appends it on next action
			more: function () {
				this._more = true;
				return this;
			},

			// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
			reject: function () {
				if (this.options.backtrack_lexer) {
					this._backtrack = true;
				} else {
					return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
						text: "",
						token: null,
						line: this.yylineno
					});

				}
				return this;
			},

			// retain first n characters of the match
			less: function (n) {
				this.unput(this.match.slice(n));
			},

			// displays already matched input, i.e. for error messages
			pastInput: function () {
				var past = this.matched.substr(0, this.matched.length - this.match.length);
				return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
			},

			// displays upcoming input, i.e. for error messages
			upcomingInput: function () {
				var next = this.match;
				if (next.length < 20) {
					next += this._input.substr(0, 20 - next.length);
				}
				return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
			},

			// displays the character position where the lexing error occurred, i.e. for error messages
			showPosition: function () {
				var pre = this.pastInput();
				var c = new Array(pre.length + 1).join("-");
				return pre + this.upcomingInput() + "\n" + c + "^";
			},

			// test the lexed token: return FALSE when not a match, otherwise return token
			test_match: function (match, indexed_rule) {
				var token,
					lines,
					backup;

				if (this.options.backtrack_lexer) {
					// save context
					backup = {
						yylineno: this.yylineno,
						yylloc: {
							first_line: this.yylloc.first_line,
							last_line: this.last_line,
							first_column: this.yylloc.first_column,
							last_column: this.yylloc.last_column
						},
						yytext: this.yytext,
						match: this.match,
						matches: this.matches,
						matched: this.matched,
						yyleng: this.yyleng,
						offset: this.offset,
						_more: this._more,
						_input: this._input,
						yy: this.yy,
						conditionStack: this.conditionStack.slice(0),
						done: this.done
					};
					if (this.options.ranges) {
						backup.yylloc.range = this.yylloc.range.slice(0);
					}
				}

				lines = match[0].match(/(?:\r\n?|\n).*/g);
				if (lines) {
					this.yylineno += lines.length;
				}
				this.yylloc = {
					first_line: this.yylloc.last_line,
					last_line: this.yylineno + 1,
					first_column: this.yylloc.last_column,
					last_column: lines ?
						lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
				};
				this.yytext += match[0];
				this.match += match[0];
				this.matches = match;
				this.yyleng = this.yytext.length;
				if (this.options.ranges) {
					this.yylloc.range = [this.offset, this.offset += this.yyleng];
				}
				this._more = false;
				this._backtrack = false;
				this._input = this._input.slice(match[0].length);
				this.matched += match[0];
				token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
				if (this.done && this._input) {
					this.done = false;
				}
				if (token) {
					return token;
				} else if (this._backtrack) {
					// recover context
					for (var k in backup) {
						this[k] = backup[k];
					}
					return false; // rule action called reject() implying the next rule should be tested instead.
				}
				return false;
			},

			// return next match in input
			next: function () {
				if (this.done) {
					return this.EOF;
				}
				if (!this._input) {
					this.done = true;
				}

				var token,
					match,
					tempMatch,
					index;
				if (!this._more) {
					this.yytext = '';
					this.match = '';
				}
				var rules = this._currentRules();
				for (var i = 0; i < rules.length; i++) {
					tempMatch = this._input.match(this.rules[rules[i]]);
					if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
						match = tempMatch;
						index = i;
						if (this.options.backtrack_lexer) {
							token = this.test_match(tempMatch, rules[i]);
							if (token !== false) {
								return token;
							} else if (this._backtrack) {
								match = false;
								continue; // rule action called reject() implying a rule MISmatch.
							} else {
								// else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
								return false;
							}
						} else if (!this.options.flex) {
							break;
						}
					}
				}
				if (match) {
					token = this.test_match(match, rules[index]);
					if (token !== false) {
						return token;
					}
					// else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
					return false;
				}
				if (this._input === "") {
					return this.EOF;
				} else {
					return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
						text: "",
						token: null,
						line: this.yylineno
					});
				}
			},

			// return next match that has a token
			lex: function lex() {
				var r = this.next();
				if (r) {
					return r;
				} else {
					return this.lex();
				}
			},

			// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
			begin: function begin(condition) {
				this.conditionStack.push(condition);
			},

			// pop the previously active lexer condition state off the condition stack
			popState: function popState() {
				var n = this.conditionStack.length - 1;
				if (n > 0) {
					return this.conditionStack.pop();
				} else {
					return this.conditionStack[0];
				}
			},

			// produce the lexer rule set which is active for the currently active lexer condition state
			_currentRules: function _currentRules() {
				if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
					return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
				} else {
					return this.conditions["INITIAL"].rules;
				}
			},

			// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
			topState: function topState(n) {
				n = this.conditionStack.length - 1 - Math.abs(n || 0);
				if (n >= 0) {
					return this.conditionStack[n];
				} else {
					return "INITIAL";
				}
			},

			// alias for begin(condition)
			pushState: function pushState(condition) {
				this.begin(condition);
			},

			// return the number of states currently on the stack
			stateStackSize: function stateStackSize() {
				return this.conditionStack.length;
			},
			options: {},
			performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

				var YYSTATE = YY_START;
				switch ($avoiding_name_collisions) {
				case 0: // Ignore
					break;
				case 1:
					return 20
					break;
				case 2:
					return 10
					break;
				case 3:
					return 11
					break;
				case 4:
					return 9
					break;
				case 5:
					return 8
					break;
				case 6:
					return 12
					break;
				case 7:
					return 14
					break;
				case 8:
					return 15
					break;
				case 9:
					return 16
					break;
				case 10:
					return 17
					break;
				case 11:
					return 18
					break;
				case 12:
					return 19
					break;
				case 13:
					return 22
					break;
				case 14:
					return 5
					break;
				case 15:
					return 21
					break;
				case 16:
					return 7
					break;
				case 17:
					return 'INVALID'
					break;
				}
			},
			rules: [/^(?:\s*\n\s*)/, /^(?:[0-9]+(\.[0-9]+)?\b)/, /^(?:\s*\*\s*)/, /^(?:\s*\/\s*)/, /^(?:\s*-\s*)/, /^(?:\s*\+\s*)/, /^(?:\s*\^\s*)/, /^(?:\(\s*)/, /^(?:\s*\))/, /^(?:\[\s*)/, /^(?:\s*\])/, /^(?:\{\s*)/, /^(?:\s*\})/, /^(?:[A-Za-z]+)/, /^(?:in\b)/, /^(?:\s+)/, /^(?:$)/, /^(?:.)/],
			conditions: {
				"INITIAL": {
					"rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],
					"inclusive": true
				}
			}
		};
		return lexer;
	})();
	parser.lexer = lexer;

	function Parser() {
		this.yy = {};
	}
	Parser.prototype = parser;
	parser.Parser = Parser;
	return new Parser;
})();